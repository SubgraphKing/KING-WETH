# """ Interface Pattern inspired by Hadrien Croubois """

## History is an accounting entity, allows us to get quickly information
## about the subgraph with minima response time.
type History @entity {

    "Contract Address of current Token"
  id:                                       ID!

    "Name of current Token"
  name:                                    String!    
  
  "Symbol of current Token"
  symbol:                                    String!

    "Total token supply"
  totalSupply:                              BigInt!

    "Total number of token transfers"
  tokenTransferCount:                       BigInt!

    "Total number of current token holders"
  tokenHolderCount:                         BigInt!

    "Total number of Addresses that have held tokens"
  totalAddressCount:                        BigInt!

    "Total withdrawal count"
  totalWithdrawalCount:                     BigInt!

    "Total despoit count"
  totalDepositCount:                        BigInt!
}

type Account @entity {

    "The ethereum address of an account"
  id:                                       ID! #     Ethereum Address
    "Current Token Balance"
  tokenBalance:                             BigInt!

    "All transactions this account has made in this ERC20 system"
  transactions:                             [Transaction]! @derivedFrom(field: "from")

    "All Token transfers this account has initiated"
  tokenTransferOut:                         [TokenTransfer]! @derivedFrom(field: "from")

    "All Token transfers this account has received"
  tokenTransferIn:                          [TokenTransfer]! @derivedFrom(field: "to")

    "These are the accounts that have given permission to this account to spend"
  spendApprovalsFrom:                       [TokenApproval]! @derivedFrom(field: "to")

    "These are the accounts, this account has given permission to spend"
  spendApprovalsTo:                         [TokenApproval]! @derivedFrom(field: "from")

    "The total number of token transfers made out"
  tokenTransferOutCount:                    BigInt!

    "The total number of tokens sent out"
  tokenTransferOutAmountTotal:              BigInt!

    "Average Amount sent"
  tokenTransferAmountAverage:               BigDecimal!

    "The total number of token transfers received in"
  tokenTransferInCount:                     BigInt!

    "The total number of tokens received"
  tokenTransferInAmountTotal:               BigInt!

    "Average Amount Received"
  tokenReceivedAmountAverage:               BigDecimal!

    "Percentage of Total Supply Owned"
  percentOfTotalSupply:                     BigDecimal!

    "The Transaction where we first see this account"
  txFirstSeen:                              Transaction!

    "The Block number where we first see this account - useful for filtering"
  txFirstSeenBlock:                         BigInt!

    "Total ETH Deposited"
  totalETHDeposited:                        BigInt!

    "Total ETH Withdrawn"
  totalETHWithdrawn:                        BigInt!
}

#This tracks all transaction so that from any entity we can go back and find the original transaction.
type Transaction @entity {
    "event.transaction.hash.toHexString()"
  id:                                       ID!

    "The Account which has made the transaction"
  from:                                     Account

    "The Account to which the transaction has been sent, this can be null"
  to:                                       Account

    "The ETH value sent in the transaction"
  value:                                    BigInt!

    "The gas used in the transaction"
  gasUsed:                                  BigInt!

    "The gas price at the time of the transaction"
  gasPrice:                                 BigInt!

    "The Timestamp of the transaction"
  timestamp:                                BigInt!

    "The block number at which the transaction occured"
  blockNumber:                              BigInt!

    "All of the events that were emited as part of this transaction"
  events:                                   [Event!]! @derivedFrom(field: "transaction")

}


# The following events are mapped from the smart contract itself. They inherit from an interface: Event
# They capture the emitted values from each event, and are linked to the array of events that occur for a transaction.
# ================================== Token Events ===================================
interface Event {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  block: BigInt!
}


# ====== Token Events
  "A type of Event on the Token Smart Contract: this is emitted by the smart contract on a TokenTransfer"
type TokenTransfer implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  block: BigInt!
  from: Account!
  to: Account!
  amount: BigInt!
  percentOfTotalSupply: BigDecimal!
}

 "A type of Event on the Token Smart Contract: this is emitted by the smart contract on an approval for spending tokens"
type TokenApproval implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  block: BigInt!
  from: Account!
  to: Account!
  amount: BigInt!
}
