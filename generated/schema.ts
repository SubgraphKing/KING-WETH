// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenTransferCount(): BigInt {
    let value = this.get("tokenTransferCount");
    return value.toBigInt();
  }

  set tokenTransferCount(value: BigInt) {
    this.set("tokenTransferCount", Value.fromBigInt(value));
  }

  get tokenHolderCount(): BigInt {
    let value = this.get("tokenHolderCount");
    return value.toBigInt();
  }

  set tokenHolderCount(value: BigInt) {
    this.set("tokenHolderCount", Value.fromBigInt(value));
  }

  get totalAddressCount(): BigInt {
    let value = this.get("totalAddressCount");
    return value.toBigInt();
  }

  set totalAddressCount(value: BigInt) {
    this.set("totalAddressCount", Value.fromBigInt(value));
  }

  get totalWithdrawalCount(): BigInt {
    let value = this.get("totalWithdrawalCount");
    return value.toBigInt();
  }

  set totalWithdrawalCount(value: BigInt) {
    this.set("totalWithdrawalCount", Value.fromBigInt(value));
  }

  get totalDepositCount(): BigInt {
    let value = this.get("totalDepositCount");
    return value.toBigInt();
  }

  set totalDepositCount(value: BigInt) {
    this.set("totalDepositCount", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get transactions(): Array<string | null> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string | null>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get tokenTransferOut(): Array<string | null> {
    let value = this.get("tokenTransferOut");
    return value.toStringArray();
  }

  set tokenTransferOut(value: Array<string | null>) {
    this.set("tokenTransferOut", Value.fromStringArray(value));
  }

  get tokenTransferIn(): Array<string | null> {
    let value = this.get("tokenTransferIn");
    return value.toStringArray();
  }

  set tokenTransferIn(value: Array<string | null>) {
    this.set("tokenTransferIn", Value.fromStringArray(value));
  }

  get spendApprovalsFrom(): Array<string | null> {
    let value = this.get("spendApprovalsFrom");
    return value.toStringArray();
  }

  set spendApprovalsFrom(value: Array<string | null>) {
    this.set("spendApprovalsFrom", Value.fromStringArray(value));
  }

  get spendApprovalsTo(): Array<string | null> {
    let value = this.get("spendApprovalsTo");
    return value.toStringArray();
  }

  set spendApprovalsTo(value: Array<string | null>) {
    this.set("spendApprovalsTo", Value.fromStringArray(value));
  }

  get tokenTransferOutCount(): BigInt {
    let value = this.get("tokenTransferOutCount");
    return value.toBigInt();
  }

  set tokenTransferOutCount(value: BigInt) {
    this.set("tokenTransferOutCount", Value.fromBigInt(value));
  }

  get tokenTransferOutAmountTotal(): BigInt {
    let value = this.get("tokenTransferOutAmountTotal");
    return value.toBigInt();
  }

  set tokenTransferOutAmountTotal(value: BigInt) {
    this.set("tokenTransferOutAmountTotal", Value.fromBigInt(value));
  }

  get tokenTransferAmountAverage(): BigDecimal {
    let value = this.get("tokenTransferAmountAverage");
    return value.toBigDecimal();
  }

  set tokenTransferAmountAverage(value: BigDecimal) {
    this.set("tokenTransferAmountAverage", Value.fromBigDecimal(value));
  }

  get tokenTransferInCount(): BigInt {
    let value = this.get("tokenTransferInCount");
    return value.toBigInt();
  }

  set tokenTransferInCount(value: BigInt) {
    this.set("tokenTransferInCount", Value.fromBigInt(value));
  }

  get tokenTransferInAmountTotal(): BigInt {
    let value = this.get("tokenTransferInAmountTotal");
    return value.toBigInt();
  }

  set tokenTransferInAmountTotal(value: BigInt) {
    this.set("tokenTransferInAmountTotal", Value.fromBigInt(value));
  }

  get tokenReceivedAmountAverage(): BigDecimal {
    let value = this.get("tokenReceivedAmountAverage");
    return value.toBigDecimal();
  }

  set tokenReceivedAmountAverage(value: BigDecimal) {
    this.set("tokenReceivedAmountAverage", Value.fromBigDecimal(value));
  }

  get percentOfTotalSupply(): BigDecimal {
    let value = this.get("percentOfTotalSupply");
    return value.toBigDecimal();
  }

  set percentOfTotalSupply(value: BigDecimal) {
    this.set("percentOfTotalSupply", Value.fromBigDecimal(value));
  }

  get txFirstSeen(): string {
    let value = this.get("txFirstSeen");
    return value.toString();
  }

  set txFirstSeen(value: string) {
    this.set("txFirstSeen", Value.fromString(value));
  }

  get txFirstSeenBlock(): BigInt {
    let value = this.get("txFirstSeenBlock");
    return value.toBigInt();
  }

  set txFirstSeenBlock(value: BigInt) {
    this.set("txFirstSeenBlock", Value.fromBigInt(value));
  }

  get totalETHDeposited(): BigInt {
    let value = this.get("totalETHDeposited");
    return value.toBigInt();
  }

  set totalETHDeposited(value: BigInt) {
    this.set("totalETHDeposited", Value.fromBigInt(value));
  }

  get totalETHWithdrawn(): BigInt {
    let value = this.get("totalETHWithdrawn");
    return value.toBigInt();
  }

  set totalETHWithdrawn(value: BigInt) {
    this.set("totalETHWithdrawn", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTransfer", id.toString(), this);
  }

  static load(id: string): TokenTransfer | null {
    return store.get("TokenTransfer", id) as TokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get percentOfTotalSupply(): BigDecimal {
    let value = this.get("percentOfTotalSupply");
    return value.toBigDecimal();
  }

  set percentOfTotalSupply(value: BigDecimal) {
    this.set("percentOfTotalSupply", Value.fromBigDecimal(value));
  }
}

export class TokenApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenApproval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenApproval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenApproval", id.toString(), this);
  }

  static load(id: string): TokenApproval | null {
    return store.get("TokenApproval", id) as TokenApproval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
